name: 'Run integration tests'
description: 'Run the integration tests for a given Python version. These tests come from the cord-backend.'

inputs:
  python-version:
    description: 'Python version to use'
    default: 3.7.12
    required: false
  test-report-file:
    description: 'File name to save the test report in'
    required: true
  private-key:
    description: 'Private key for integration tests'
    required: true
  backend-access-token:
    description: 'Access token to backend repo'
    required: true

  poetry-version:
    description: 'Poetry version to use'
    default: 1.1.12
    required: false
  backend-repo:
    description: 'Backend repo name'
    default: cord-team/cord-backend
    required: false
  project: 
    description: 'project of the backend repo.'
    default: sdk-integration-tests
    required: false
  test-dir:
    description: 'Test directory of the integration tests project.'
    default: ./src/cord/sdk_integration_tests/tests
    required: false
  environment:
    default: DEV
    required: false


runs:
  using: "composite"

  steps:
      - name: Checkout backend repo
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.backend-repo }}
          token: ${{ inputs.backend-access-token }}

      - name: Setup Poetry environment
        uses: ./.github/actions/setup-poetry-environment
        with:
          project: ${{ inputs.project }}
          cache-key: sdk-${{ hashFiles('projects/sdk-integration-tests/poetry.lock') }}-1
          python-version: ${{ inputs.python-version }}

      - name: Setup FFMPEG
        uses: FedericoCarboni/setup-ffmpeg@v1

      - name: Get SDK
        run: |
          cd projects/${{ inputs.project }}
          python -m pip install --upgrade pip
          GIT_REPO=${{ github.repositoryUrl }}
          poetry add git+"${GIT_REPO/"git:"/"https:"}"
          poetry install
        shell: bash

      - name: Run tests
        run: |
          cd projects/${{ inputs.project }}
          source .venv/bin/activate
          export CORD_ENV=${{ inputs.environment }}
          export PRIVATE_KEY="${{ inputs.private-key }}"
          python -m pytest ${{ inputs.test-dir }} --rootdir=${{ inputs.test-dir }} --verbose --junitxml=${{ inputs.test-report-file }}
        shell: bash

      - name: Upload report
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ${{ inputs.test-report-file }}
          path: projects/${{ inputs.project }}/${{ inputs.test-report-file }}

      - name: Checkout current repo for post cleanup
        uses: actions/checkout@v2